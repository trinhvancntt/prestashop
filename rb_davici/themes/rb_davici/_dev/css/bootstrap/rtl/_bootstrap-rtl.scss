
//========== RIGHT TO LEFT (OVERRIDE BOOSTRAP TO RIGHT TO LEFT) ==========//
$enable-flex: false;
//== MIXINS ==//
//_float.scss
	@mixin float-left {
	  	float: right !important;
	}
	@mixin float-right {
	  	float: left !important;
	}

//_reset-text.scss
	@mixin reset-text {
		  text-align: right; 
	}
//_pagination.scss
	@mixin pagination-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
		.page-item {
		    &:first-child {
		    	.page-link {
					@include border-left-radius(inherit);
		        	@include border-right-radius($border-radius);
		      	}
		    }
		    &:last-child {
		      	.page-link {
		        	@include border-left-radius($border-radius);
					@include border-right-radius(inherit);
		      	}
		    }
		}
	}

//_lists.scss
	@mixin list-unstyled {
	  	padding-left: inherit;
	  	padding-right: 0;
	}
//_grid.scss
	@mixin make-col($size, $columns: $grid-columns) {
		@if $enable-flex {
		} @else {
			float: right;
		}
	}
	@mixin make-col-offset($size, $columns: $grid-columns) {
	  	margin-left: inherit;
	  	margin-right: percentage($size / $columns);
	}
	@mixin make-col-push($size, $columns: $grid-columns) {
	  	left: inherit;
	  	right: if($size > 0, percentage($size / $columns), auto);
	}
	@mixin make-col-pull($size, $columns: $grid-columns) {
		left: if($size > 0, percentage($size / $columns), auto);
	  	right: inherit;
	}
	@mixin make-col-modifier($type, $size, $columns) {
		@if $type == push {
			@include make-col-push($size, $columns);
		} @else if $type == pull {
			@include make-col-pull($size, $columns);
		} @else if $type == offset {
			@include make-col-offset($size, $columns);
		}
	}
//_grid-framework.scss
	@mixin make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;

    @if $enable-flex {
      width: 100%;
    }

    @include make-gutters($gutters);
  }

  $breakpoint-counter: 0;
  @each $breakpoint in map-keys($breakpoints) {
    $breakpoint-counter: ($breakpoint-counter + 1);

    // Allow columns to stretch full width below their breakpoints
    .col-#{$breakpoint} {
      @extend %grid-column;
    }
    // Override Leotheme
    .col-#{$breakpoint}-2-4{
      @extend %grid-column;
    }
    .col-#{$breakpoint}-4-8{
      @extend %grid-column;
    }
    .col-#{$breakpoint}-7-2{
      @extend %grid-column;
    }
    .col-#{$breakpoint}-9-6{
      @extend %grid-column;
    }
    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      @if $enable-flex {
        .col-#{$breakpoint} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
      }

      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @include make-col($i, $columns);
        }
      }
      // Override Leotheme
      .col-#{$breakpoint}-2-4 {
        @include make-col(2.4);
      }
      .col-#{$breakpoint}-4-8 {
        @include make-col(4.8);
      }
      .col-#{$breakpoint}-7-2 {
        @include make-col(7.2);
      }
      .col-#{$breakpoint}-9-6 {
        @include make-col(9.6);
      }
      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .#{$modifier}-#{$breakpoint}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
        // Override Leotheme
        .#{$modifier}-#{$breakpoint}-2-4 {
          @include make-col-modifier($modifier, 2.4, 12);
        }
        .#{$modifier}-#{$breakpoint}-4-8 {
          @include make-col-modifier($modifier, 4.8, 12);
        }
        .#{$modifier}-#{$breakpoint}-7-2 {
          @include make-col-modifier($modifier, 7.2, 12);
        }
        .#{$modifier}-#{$breakpoint}-9-6 {
          @include make-col-modifier($modifier, 9.6, 12);
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
          .offset-#{$breakpoint}-#{$i} {
            @include make-col-modifier(offset, $i, $columns)
          }
        }
        // Override Leotheme
        .offset-#{$breakpoint}-2-4 {
          @include make-col-modifier(offset, 2.4, 12);
        }
        .offset-#{$breakpoint}-4-8 {
          @include make-col-modifier(offset, 4.8, 12);
        }
        .offset-#{$breakpoint}-7-2 {
          @include make-col-modifier(offset, 7.2, 12);
        }
        .offset-#{$breakpoint}-9-6 {
          @include make-col-modifier(offset, 9.6, 12);
        }
      }
    }
  }
}
//_reboot.scss
	dd {
	  	margin-left: inherit;
	  	margin-right: 0;
	}
	caption {
		text-align: right;
	}
	th{
		text-align: right;
	}
//_type.scss
	.list-unstyled {
		@include list-unstyled;
	}
	.list-inline {
		@include list-unstyled;
	}
	.list-inline-item {
	  	&:not(:last-child) {
	  		margin-left: $list-inline-padding;
	    	margin-right: inherit;
	  	}
	}
	.blockquote {
		border-left: inherit;
		border-right: $blockquote-border-width solid $blockquote-border-color;
	}
	.blockquote-reverse {
		padding-left: $spacer;
		padding-right: 0;
		text-align: left;
		border-left: $blockquote-border-width solid $blockquote-border-color;
		border-right: 0;
	}
//_grid.scss
	@if $enable-grid-classes {
		@include make-grid-columns();
	}
//_tables.scss
	.table-reflow {
		thead {
			float: right;
		}
		th,
		td {
			border-left: inherit;
			border-right: $table-border-width solid $table-border-color;
			&:last-child {
				border-left: $table-border-width solid $table-border-color;
				border-right: inherit;
			}
		}
		tr {
			float: right;
		}
	}
//_forms.scss
	.form-check-label {
		padding-left: inherit;
		padding-right: 1.25rem;
	}
	.form-check-input {
		margin-left: inherit;
		margin-right: -1.25rem;
	}
	.form-check-inline {
		padding-left: inherit;
		padding-right: 1.25rem;
	  	+ .form-check-inline {
	    	margin-left: inherit;
	    	margin-right: .75rem;
	  	}
	}
	.form-control-success,
	.form-control-warning,
	.form-control-danger {
		padding-right: ($input-padding-x * 3);
		padding-right: inherit;
	}
	.form-inline {
	  	@include media-breakpoint-up(sm) {
	    	.form-check-label {
	      		padding-left: inherit;
	      		padding-right: 0;
	    	}
	    	.form-check-input {
	      		margin-left: inherit;
	      		margin-right: 0;
	    	}
	  	}
	}
//_dropdown.scss
	.dropdown-toggle {
		&::after {
			margin-left: inherit;
			margin-right: $caret-width;
		}
	}
	.dropdown-menu {
		left: auto;
		right: 0;
		float: right;
	}
	.dropdown-menu-right {
		right: auto;
		left: 0;
	}
	.dropdown-menu-left {
		right: 0;
		left: auto;
	}
//_button-group.scss
	.btn-group,
	.btn-group-vertical {
		> .btn {
			float: right;
		}
	}
	.btn-group {
		.btn + .btn,
		.btn + .btn-group,
		.btn-group + .btn,
		.btn-group + .btn-group {
			margin-left: inherit;
			margin-right: -$input-btn-border-width;
		}
	}
	.btn-toolbar {
		margin-left: inherit;
		margin-right: -$btn-toolbar-margin;
		.btn-group,
		.input-group {
			float: right;
		}
		> .btn,
		> .btn-group,
		> .input-group {
			margin-left: inherit;
			margin-right: $btn-toolbar-margin;
		}
	}
	.btn-group > .btn:first-child {
		margin-left: inherit;
		margin-right: 0;
		&:not(:last-child):not(.dropdown-toggle) {
			@include border-right-radius(inherit);
			@include border-left-radius(0);
		}
	}
	.btn-group > .btn:last-child:not(:first-child),
	.btn-group > .dropdown-toggle:not(:first-child) {
		@include border-left-radius(inherit);
		@include border-right-radius(0);
	}
	.btn-group > .btn-group {
	  	float: right;
	}
	.btn-group > .btn-group:first-child:not(:last-child) {
		> .btn:last-child,
		> .dropdown-toggle {
			@include border-left-radius(0);
			@include border-right-radius(inherit);
		}
	}
	.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {
		@include border-left-radius(inherit);
		@include border-right-radius(0);
	}
	.btn + .dropdown-toggle-split {
		&::after {
			margin-left: inherit;
			margin-right: 0;
		}
	}
	.btn .caret {
		margin-left: inherit;
		margin-right: 0;
	}
	.btn-group-vertical {
		> .btn,
		> .btn-group,
		> .btn-group > .btn {
			float: none;
		}
		> .btn-group {
			> .btn {
			  	float: none;
			}
		}
		> .btn + .btn,
		> .btn + .btn-group,
		> .btn-group + .btn,
		> .btn-group + .btn-group {
			margin-left: inherit;
			margin-right: 0;
		}
	}
//_input-group.scss
	.input-group {
		.form-control {
			@if $enable-flex {
			  	flex: 1;
			} @else {
			  	float: right;
			}
		}
	}
	.input-group .form-control:not(:last-child),
	.input-group-addon:not(:last-child),
	.input-group-btn:not(:last-child) > .btn,
	.input-group-btn:not(:last-child) > .btn-group > .btn,
	.input-group-btn:not(:last-child) > .dropdown-toggle,
	.input-group-btn:not(:first-child) > .btn:not(:last-child):not(.dropdown-toggle),
	.input-group-btn:not(:first-child) > .btn-group:not(:last-child) > .btn {
		@include border-left-radius(0);
		@include border-right-radius(inherit);
	}
	.input-group-addon:not(:last-child) {
		border-left: 0;
		border-right: inherit;
	}
	.input-group .form-control:not(:first-child),
	.input-group-addon:not(:first-child),
	.input-group-btn:not(:first-child) > .btn,
	.input-group-btn:not(:first-child) > .btn-group > .btn,
	.input-group-btn:not(:first-child) > .dropdown-toggle,
	.input-group-btn:not(:last-child) > .btn:not(:first-child),
	.input-group-btn:not(:last-child) > .btn-group:not(:first-child) > .btn {
		@include border-left-radius(inherit);
		@include border-right-radius(0);
	}
	.form-control + .input-group-addon:not(:first-child) {
		border-left: inherit;
		border-right: 0;
	}
	.input-group-btn {
	  	> .btn {
		    + .btn {
		      	margin-left: inherit;
		      	margin-right: (-$input-btn-border-width);
		    }
	  	}
	  	&:not(:last-child) {
		    > .btn,
		    > .btn-group {
		    	margin-left: (-$input-btn-border-width);
		      	margin-right: inherit;
		    }
	  	}
		&:not(:first-child) {
			> .btn,
			> .btn-group {
			  	margin-left: inherit;
			  	margin-right: (-$input-btn-border-width);
			}
		}
	}
//_custom-forms.scss
	.custom-control {
		padding-left: inherit;
		padding-right: $custom-control-gutter;
		+ .custom-control {
			margin-left: inherit;
			margin-right: $custom-control-spacer-x;
		}
	}
	.custom-control-indicator {
		left: auto;
		right: 0;
	}
	.custom-controls-stacked {
		.custom-control {
			float: right;
			+ .custom-control {
      			margin-left: inherit;
      			margin-right: 0;
    		}
		}
	}
	.custom-select {
		padding: $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding) $custom-select-padding-y $custom-select-padding-x;
		padding-left: $custom-select-padding-x \9;
	}
	.custom-file-control {
		&::before {
			left: -$custom-file-border-width;
			right: auto;
			@include border-radius($custom-file-border-radius 0 0 $custom-file-border-radius);
		}
	}
//_nav.scss
	.nav {
		padding-left: inherit;
		padding-right: 0;
	}
	.nav-inline {
		.nav-item + .nav-item,
		.nav-link + .nav-link {
			margin-left: inherit;
			margin-right: $nav-item-inline-spacer;
		}
	}
	.nav-tabs {
		.nav-item {
			float: right;
			+ .nav-item {
				margin-left: inherit;
				margin-right: $nav-item-margin;
			}
		}
	}
	.nav-pills {
		.nav-item {
			float: right;
			+ .nav-item {
				margin-left: inherit;
				margin-right: $nav-item-margin;
			}
		}
	}
	.nav-stacked {
		.nav-item {
			float: none;
			+ .nav-item {
			  	margin-left: inherit;
			  	margin-right: 0;
			}
		}
	}
//_navbar.scss
	.navbar-brand {
		float: right;
		margin-left: 1rem;
		margin-right: inherit;
	}
	.navbar-divider {
	  	float: right;
	}
	.navbar-toggleable {
		@each $breakpoint in map-keys($grid-breakpoints) {
			$next: breakpoint-next($breakpoint, $grid-breakpoints);
			&-#{$breakpoint} {
			  	@include media-breakpoint-down($breakpoint) {
				    .navbar-brand {
				      	float: none;
				      	margin-left: 0;
				      	margin-right: inherit;
				    }
				    .navbar-nav {
				      	.dropdown-menu {
				        	float: none;
				      	}
				    }
			  	}
			}
		}
	}
	.navbar-nav {
		.nav-item {
			float: right;
		}
		.nav-link {
			+ .nav-link {
				margin-left: inherit;
				margin-right: 1rem;
			}
		}
		.nav-item + .nav-item {
			margin-left: inherit;
			margin-right: 1rem;
		}
	}
	.navbar-toggleable {
		&-xs {
			@include media-breakpoint-down(xs) {
				.navbar-nav .nav-item {
					float: none;
					margin-left: inherit;
					margin-right: 0;
				}
			}
		}
		&-sm {
			@include media-breakpoint-down(sm) {
				.navbar-nav .nav-item {
					float: none;
					margin-left: inherit;
					margin-right: 0;
				}
			}
		}
		&-md {
			@include media-breakpoint-down(md) {
				.navbar-nav .nav-item {
					float: none;
					margin-left: inherit;
					margin-right: 0;
				}
			}
	  	}
	}
//_card.scss
	.card-link {
		+ .card-link {
			margin-left: inherit;
			margin-right: $card-spacer-x;
		}
	}
	.card-header-tabs {
		margin-left: -($card-spacer-x / 2);
		margin-right: -($card-spacer-x / 2);
	}
	.card-blockquote {
		border-left: inherit;
		border-right: 0;
	}
	@include media-breakpoint-up(sm) {
	  	.card-group {
	    	.card {
				+ .card {
					margin-left: inherit;
					margin-right: 0;
					border-left: inherit;
					border-right: 0;
				}
		      	@if $enable-rounded {
		        	&:first-child {
		        		@include border-left-radius(0);
		          		@include border-right-radius(inherit);
		          		.card-img-top {
		            		border-top-left-radius: 0;
		            		border-top-right-radius: inherit;
		          		}
		          		.card-img-bottom {
		          			border-bottom-left-radius: 0;
		            		border-bottom-right-radius: inherit;
		          		}
		        	}
		        	&:last-child {
		          		@include border-left-radius(inherit);
		          		@include border-right-radius(0);
		          		.card-img-top {
		            		border-top-left-radius: inherit;
		            		border-top-right-radius: 0;
		          		}
		          		.card-img-bottom {
		          			border-bottom-left-radius: inherit;
		            		border-bottom-right-radius: 0;
		          		}
	       		 	}
		      	}
		    }
	  	}
	}
//_breadcrumb.scss
	.breadcrumb-item {
		float: right;
	}
//_pagination.scss
	.pagination {
		padding-left: inherit;
		padding-right: 0;
	}
	.page-item {
	  	&:first-child {
	    	.page-link {
	      		margin-left: inherit;
	      		margin-right: 0;
	      		@include border-left-radius(inherit);
	      		@include border-right-radius($border-radius);
	    	}
	  	}
	  	&:last-child {
	    	.page-link {
	    		@include border-left-radius($border-radius);
	      		@include border-right-radius(inherit);
	    	}
	  	}
	}
	.page-link {
		float: right;
		margin-left: -1px;
		margin-right: inherit;
	}
	.pagination-lg {
		@include pagination-size($pagination-padding-y-lg, $pagination-padding-x-lg, $font-size-lg, $line-height-lg, $border-radius-lg);
	}
	.pagination-sm {
		@include pagination-size($pagination-padding-y-sm, $pagination-padding-x-sm, $font-size-sm, $line-height-sm, $border-radius-sm);
	}
//_alert.scss
	.alert-dismissible {
		padding-left: ($alert-padding-x * 2);
	  	padding-right: inherit;
	  	.close {
	  		left: -$alert-padding-x;
	    	right: inherit;
		}
	}
//_progress.scss
	.progress[value]::-moz-progress-bar {
		@include border-left-radius(inherit);
		@include border-right-radius($progress-border-radius);
	}
	.progress[value]::-webkit-progress-value {
		@include border-left-radius(inherit);
		@include border-right-radius($progress-border-radius);
	}
	.progress[value="100"]::-moz-progress-bar {
		@include border-right-radius($progress-border-radius);
		@include border-right-radius(inherit);
	}
	.progress[value="100"]::-webkit-progress-value {
		@include border-left-radius($progress-border-radius);
		@include border-right-radius(inherit);
	}
	@media screen and (min-width:0\0) {
		.progress-bar {
			@include border-left-radius(inherit);
			@include border-right-radius($progress-border-radius);
		}
		.progress[width="100%"] {
			@include border-left-radius($progress-border-radius);
			@include border-right-radius(inherit);
		}
	}
//_media.scss
	.media-right {
		padding-left: inherit;
		padding-right: $media-alignment-padding-x;
	}
	.media-left {
		padding-left: $media-alignment-padding-x;
		padding-right: inherit;
	}
	.media-list {
		padding-left: inherit;
		padding-right: 0;
	}
//_list-group.scss
	.list-group {
		padding-left: inherit;
		padding-right: 0;
	}
//_responsive-embed.scss
	.embed-responsive {
		.embed-responsive-item,
		iframe,
		embed,
		object,
		video {
			left: auto;
			right: 0;
		}
	}
//_close.scss
	.close {
		float: left;
	}

//== Components w/ JavaScript ==//
//_tooltip.scss
	.tooltip {
		@include reset-text();
	  	&.tooltip-top,
	  	&.bs-tether-element-attached-bottom {
		    .tooltip-inner::before {
				left: auto;
				right: 50%;
				margin-left: inherit;
				margin-right: -$tooltip-arrow-width;
		    }
	  	}
	  	&.tooltip-right,
	  	&.bs-tether-element-attached-left {
	    	margin-left: inherit;
	    	margin-right: $tooltip-margin;
	    	.tooltip-inner::before {
	      		left: auto;
	      		right: 0;
	      		border-left-color: $tooltip-arrow-color;
	      		border-right-color: inherit;
	    	}
	  	}
	  	&.tooltip-bottom,
	  	&.bs-tether-element-attached-top {
	    	.tooltip-inner::before {
	      		left: auto;
	      		right: 50%;
	      		margin-left: inherit;
	      		margin-right: -$tooltip-arrow-width;
	    	}
	  	}
	  	&.tooltip-left,
	  	&.bs-tether-element-attached-right {
	    	margin-left: inherit;
	    	margin-right: -$tooltip-margin;
	    	.tooltip-inner::before {
	    		left: 0;
	      		right: auto;
	      		border-width: $tooltip-arrow-width $tooltip-arrow-width $tooltip-arrow-width 0;
	      		border-left-color: inherit;
	      		border-right-color: $tooltip-arrow-color;
	    	}
	  	}
	}
//_popover.scss
	.popover {
	  	left: auto;
	  	right: 0;
	  	@include reset-text();
	  	&.popover-top,
	  	&.bs-tether-element-attached-bottom {
	    	&::before,
	    	&::after {
	      		left: auto;
	      		right: 50%;
	    	}
	    	&::before {
	      		margin-left: inherit;
	      		margin-right: -$popover-arrow-outer-width;
    		}
	    	&::after {
	      		margin-left: inherit;
	      		margin-right: -$popover-arrow-width;
	    	}
	  	}
	  	&.popover-right,
	  	&.bs-tether-element-attached-left {
			margin-left: inherit;
			margin-right: $popover-arrow-width;
	    	&::before,
	    	&::after {
	      		border-left-width: inherit;
	      		border-right-width: 0;
	    	}
	    	&::before {
	      		left: auto;
	      		right: -$popover-arrow-outer-width;
	      		border-left-color: $popover-arrow-outer-color;
	      		border-right-color: inherit;
	    	}
	    	&::after {
	      		left: auto;
	      		right: -($popover-arrow-outer-width - 1);
	      		border-left-color: $popover-arrow-color;
	      		border-right-color: inherit;
	    	}
	  	}
	  	&.popover-bottom,
	  	&.bs-tether-element-attached-top {
	    	&::before,
	    	&::after {
				left: auto;
				right: 50%;
	    	}
	    	&::before {
				margin-left: inherit;
				margin-right: -$popover-arrow-outer-width;
	    	}
	    	&::after {
				margin-left: inherit;
				margin-right: -$popover-arrow-width;
			}
			.popover-title::before {
				left: auto;
				right: 50%;
				margin-left: inherit;
				margin-right: -10px;
			}
		}
	  	&.popover-left,
	  	&.bs-tether-element-attached-right {
	    	margin-left: inherit;
	    	margin-right: -$popover-arrow-width;
	    	&::before,
	    	&::after {
	    		border-left-width: 0;
	      		border-right-width: inherit;
	    	}
	    	&::before {
	    		left: -$popover-arrow-outer-width;
	      		right: auto;
	      		border-left-color: inherit;
	      		border-right-color: $popover-arrow-outer-color;
	    	}
	    	&::after {
	    		left: -($popover-arrow-outer-width - 1);
	      		right: auto;
	      		border-left-color: inherit;
	      		border-right-color: $popover-arrow-color;
	    	}
	  	}
	}
//_carousel.scss
	.carousel-inner {
		direction: ltr;
	}
	.carousel-control {
	  	direction: ltr;
	}
	.carousel-indicators {
		direction: ltr;
	}


//== Utility classes ==//

//_borders.scss
	.rounded-right {
		@include border-left-radius($border-radius);
	}
	.rounded-left {
		@include border-right-radius($border-radius);
	}
//_flex.scss
	@if $enable-flex {
	  	@each $breakpoint in map-keys($grid-breakpoints) {
	    	@include media-breakpoint-up($breakpoint) {
	      		.flex-#{$breakpoint}-first { order: 1; }
	      		.flex-#{$breakpoint}-last { order: -1; }
	    	}
	    	@include media-breakpoint-up($breakpoint) {
		      	.flex-items-#{$breakpoint}-left { justify-content: flex-end; }
		      	.flex-items-#{$breakpoint}-right { justify-content: flex-start; }
	    	}
	  	}
	}
//_float.scss
	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint) {
			.float-#{$breakpoint}-left {
			  	@include float-left();
			}
			.float-#{$breakpoint}-right {
			  	@include float-right();
			}
			.float-#{$breakpoint}-none {
			  	float: none !important;
			}
		}
	}
//_text.scss
	@each $breakpoint in map-keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint) {
			.text-#{$breakpoint}-left   { text-align: right !important; }
			.text-#{$breakpoint}-right  { text-align: left !important; }
		}
	}
//_visibility.scss